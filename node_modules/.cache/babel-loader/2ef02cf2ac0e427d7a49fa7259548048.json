{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\n\nconst useNavigation = navRef => {\n  _s();\n\n  const MOBILE_BREAKING_POINT = 992;\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isMobileView, setIsMobileView] = useState(false);\n\n  const getScreenSize = () => {\n    setIsMobileView(window.innerWidth < MOBILE_BREAKING_POINT ? true : false);\n  };\n\n  const handleScroll = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n  const handleClickOutside = useCallback(e => {\n    if (navRef.current && !navRef.current.contains(e.target)) {\n      setIsMenuOpen(false);\n    }\n  }, [navRef]); // Viewport\n\n  useEffect(() => {\n    getScreenSize();\n    window.addEventListener('resize', getScreenSize);\n    return () => window.removeEventListener('resize', getScreenSize);\n  }, []); // Scroll\n\n  useEffect(() => {\n    if (isMenuOpen) window.addEventListener('scroll', handleScroll, {\n      passive: true\n    });\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [isMenuOpen, handleScroll]); // Click Outside\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n  return {\n    isMobileView,\n    isMenuOpen,\n    setIsMenuOpen\n  };\n};\n\n_s(useNavigation, \"UmpyfofOiIvfB6LBw+GtTQG6vQU=\");\n\nexport default useNavigation;","map":{"version":3,"sources":["C:/Users/Jetlir/Desktop/Materials/starter-files/src/hooks/useNavigation.js"],"names":["useState","useEffect","useCallback","useNavigation","navRef","MOBILE_BREAKING_POINT","isMenuOpen","setIsMenuOpen","isMobileView","setIsMobileView","getScreenSize","window","innerWidth","handleScroll","handleClickOutside","e","current","contains","target","addEventListener","removeEventListener","passive","document"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;;AAEA,MAAMC,aAAa,GAAGC,MAAM,IAAI;AAAA;;AAC5B,QAAMC,qBAAqB,GAAG,GAA9B;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMU,aAAa,GAAG,MAAM;AACxBD,IAAAA,eAAe,CAACE,MAAM,CAACC,UAAP,GAAoBP,qBAApB,GAA4C,IAA5C,GAAmD,KAApD,CAAf;AACH,GAFD;;AAIA,QAAMQ,YAAY,GAAGX,WAAW,CAAC,MAAM;AACnCK,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAF+B,EAE7B,EAF6B,CAAhC;AAIA,QAAMO,kBAAkB,GAAGZ,WAAW,CAClCa,CAAC,IAAI;AACD,QAAIX,MAAM,CAACY,OAAP,IAAkB,CAACZ,MAAM,CAACY,OAAP,CAAeC,QAAf,CAAwBF,CAAC,CAACG,MAA1B,CAAvB,EAA0D;AACtDX,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GALiC,EAMlC,CAACH,MAAD,CANkC,CAAtC,CAb4B,CAsB5B;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,aAAa;AACbC,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCT,aAAlC;AACA,WAAO,MAAMC,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCV,aAArC,CAAb;AACH,GAJQ,EAIN,EAJM,CAAT,CAvB4B,CA6B5B;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,UAAJ,EAAgBK,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCN,YAAlC,EAAgD;AAAEQ,MAAAA,OAAO,EAAE;AAAX,KAAhD;AAChB,WAAO,MAAM;AACTV,MAAAA,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCP,YAArC;AACH,KAFD;AAGH,GALQ,EAKN,CAACP,UAAD,EAAaO,YAAb,CALM,CAAT,CA9B4B,CAqC5B;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,QAAQ,CAACH,gBAAT,CAA0B,WAA1B,EAAuCL,kBAAvC;AACA,WAAO,MAAM;AACTQ,MAAAA,QAAQ,CAACF,mBAAT,CAA6B,WAA7B,EAA0CN,kBAA1C;AACH,KAFD;AAGH,GALQ,EAKN,CAACA,kBAAD,CALM,CAAT;AAOA,SAAO;AACHN,IAAAA,YADG;AAEHF,IAAAA,UAFG;AAGHC,IAAAA;AAHG,GAAP;AAKH,CAlDD;;GAAMJ,a;;AAoDN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst useNavigation = navRef => {\n    const MOBILE_BREAKING_POINT = 992;\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const [isMobileView, setIsMobileView] = useState(false);\n\n    const getScreenSize = () => {\n        setIsMobileView(window.innerWidth < MOBILE_BREAKING_POINT ? true : false);\n    };\n\n    const handleScroll = useCallback(() => {\n        setIsMenuOpen(false);\n    }, []);\n\n    const handleClickOutside = useCallback(\n        e => {\n            if (navRef.current && !navRef.current.contains(e.target)) {\n                setIsMenuOpen(false);\n            }\n        },\n        [navRef]\n    );\n\n    // Viewport\n    useEffect(() => {\n        getScreenSize();\n        window.addEventListener('resize', getScreenSize);\n        return () => window.removeEventListener('resize', getScreenSize);\n    }, []);\n\n    // Scroll\n    useEffect(() => {\n        if (isMenuOpen) window.addEventListener('scroll', handleScroll, { passive: true });\n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [isMenuOpen, handleScroll]);\n\n    // Click Outside\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [handleClickOutside]);\n\n    return {\n        isMobileView,\n        isMenuOpen,\n        setIsMenuOpen,\n    };\n};\n\nexport default useNavigation;\n"]},"metadata":{},"sourceType":"module"}