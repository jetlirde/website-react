{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jetlir\\\\Desktop\\\\Materials\\\\starter-files\\\\src\\\\pages\\\\Rocket\\\\Rocket.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport Error from './../../components/Error';\nimport Loader from './../../components/Loader';\nimport Rocket from './../../components/Rocket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_ROCKET_INFO = gql`\n    query GET_ROCKET_INFO($rocketId: ID!){\n      rocket(id: $rocketId) {\n         name\n          height {\n          feet\n          meters\n          }\n           diameter {\n              feet\n              meters\n           }\n           stages\n           cost_per_launch\n             engines {\n               type\n               number\n               propellant_1\n               propellant_2\n               thrust_to_weight\n            }\n        }\n    }\n\n\n`;\n\nconst RocketPage = _ref => {\n  _s();\n\n  let {\n    match\n  } = _ref;\n  const rocketId = match.params.id;\n  console.log({\n    rocketId\n  });\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(GET_ROCKET_INFO, {\n    variables: {\n      rocketId\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Error, {\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Rocket, {\n    rocket: { ...data.rocket,\n      id: rocketId\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n};\n\n_s(RocketPage, \"tP+6C5plfRwxqCbBj3cMUcL7Opk=\", false, function () {\n  return [useQuery];\n});\n\n_c = RocketPage;\nexport default RocketPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RocketPage\");","map":{"version":3,"sources":["C:/Users/Jetlir/Desktop/Materials/starter-files/src/pages/Rocket/Rocket.js"],"names":["React","gql","useQuery","Error","Loader","Rocket","GET_ROCKET_INFO","RocketPage","match","rocketId","params","id","console","log","data","loading","error","variables","rocket"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;;AAEA,MAAMC,eAAe,GAAGL,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;;AA2BA,MAAMM,UAAU,GAAG,QAAa;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAC5B,QAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,EAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACJ,IAAAA;AAAD,GAAZ;AAEA,QAAM;AAAEK,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2Bd,QAAQ,CAACI,eAAD,EAAkB;AACvDW,IAAAA,SAAS,EAAE;AAACR,MAAAA;AAAD;AAD4C,GAAlB,CAAzC;AAIA,MAAIM,OAAJ,EAAa,oBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAGC,KAAH,EAAU,oBAAM,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEA;AAAd;AAAA;AAAA;AAAA;AAAA,UAAN;AAGV,sBAAO,QAAC,MAAD;AAAQ,IAAA,MAAM,EAAE,EAAC,GAAGF,IAAI,CAACI,MAAT;AAAiBP,MAAAA,EAAE,EAACF;AAApB;AAAhB;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAbD;;GAAMF,U;UAI+BL,Q;;;KAJ/BK,U;AAeN,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport { gql, useQuery } from '@apollo/client';\n\nimport Error from './../../components/Error';\nimport Loader from './../../components/Loader';\nimport Rocket from './../../components/Rocket'\n\nconst GET_ROCKET_INFO = gql`\n    query GET_ROCKET_INFO($rocketId: ID!){\n      rocket(id: $rocketId) {\n         name\n          height {\n          feet\n          meters\n          }\n           diameter {\n              feet\n              meters\n           }\n           stages\n           cost_per_launch\n             engines {\n               type\n               number\n               propellant_1\n               propellant_2\n               thrust_to_weight\n            }\n        }\n    }\n\n\n`;\n\nconst RocketPage = ({match}) => {\n    const rocketId = match.params.id;\n    console.log({rocketId});\n\n    const { data, loading, error } = useQuery(GET_ROCKET_INFO, {\n        variables: {rocketId},\n    });\n\n    if (loading) return <Loader />;\n    if(error) return<Error error={error} />;\n \n\n    return <Rocket rocket={{...data.rocket, id:rocketId}} />;\n};\n\nexport default RocketPage;\n"]},"metadata":{},"sourceType":"module"}